//+build !swipe

// Code generated by Swipe v2.0.0-rc1. DO NOT EDIT.

package transport

import (
	"context"
	"github.com/go-kit/kit/endpoint"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
)

type ClientOption func(*clientOpts)
type clientOpts struct {
	scrapperControllerGetByDomainClientOption         []jsonrpc.ClientOption
	scrapperControllerGetByDomainEndpointMiddleware   []endpoint.Middleware
	scrapperControllerGetCountClientOption            []jsonrpc.ClientOption
	scrapperControllerGetCountEndpointMiddleware      []endpoint.Middleware
	scrapperControllerGetMaxLatencyClientOption       []jsonrpc.ClientOption
	scrapperControllerGetMaxLatencyEndpointMiddleware []endpoint.Middleware
	scrapperControllerGetMinLatencyClientOption       []jsonrpc.ClientOption
	scrapperControllerGetMinLatencyEndpointMiddleware []endpoint.Middleware
	genericClientOption                               []jsonrpc.ClientOption
	genericEndpointMiddleware                         []endpoint.Middleware
}

func GenericClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func ScrapperControllerGetByDomainClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetByDomainClientOption = opt }
}

func ScrapperControllerGetByDomainClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetByDomainEndpointMiddleware = opt }
}

func ScrapperControllerGetCountClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetCountClientOption = opt }
}

func ScrapperControllerGetCountClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetCountEndpointMiddleware = opt }
}

func ScrapperControllerGetMaxLatencyClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetMaxLatencyClientOption = opt }
}

func ScrapperControllerGetMaxLatencyClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetMaxLatencyEndpointMiddleware = opt }
}

func ScrapperControllerGetMinLatencyClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetMinLatencyClientOption = opt }
}

func ScrapperControllerGetMinLatencyClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.scrapperControllerGetMinLatencyEndpointMiddleware = opt }
}

type clientScrapperController struct {
	getByDomainEndpoint   endpoint.Endpoint
	getCountEndpoint      endpoint.Endpoint
	getMaxLatencyEndpoint endpoint.Endpoint
	getMinLatencyEndpoint endpoint.Endpoint
}

func (c *clientScrapperController) GetByDomain(ctx context.Context, domain string) (int64, int, error) {
	resp, err := c.getByDomainEndpoint(ctx, GetByDomainRequest{Domain: domain})
	if err != nil {
		return 0, 0, err
	}
	response := resp.(GetByDomainResponse)
	return response.Latency, response.Code, nil
}

func (c *clientScrapperController) GetCount(ctx context.Context) int {
	resp, _ := c.getCountEndpoint(ctx, nil)
	response := resp.(int)
	return response
}

func (c *clientScrapperController) GetMaxLatency(ctx context.Context) (string, int64, int, error) {
	resp, err := c.getMaxLatencyEndpoint(ctx, nil)
	if err != nil {
		return "", 0, 0, err
	}
	response := resp.(GetMaxLatencyResponse)
	return response.Domain, response.Latency, response.Code, nil
}

func (c *clientScrapperController) GetMinLatency(ctx context.Context) (string, int64, int, error) {
	resp, err := c.getMinLatencyEndpoint(ctx, nil)
	if err != nil {
		return "", 0, 0, err
	}
	response := resp.(GetMinLatencyResponse)
	return response.Domain, response.Latency, response.Code, nil
}
