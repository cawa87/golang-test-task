//+build !swipe

// Code generated by Swipe v2.0.0-rc1. DO NOT EDIT.

package transport

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/kkucherenkov/golang-test-task/controller"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
	"github.com/pquerna/ffjson/ffjson"
	"net"
	"net/url"
	"strings"
)

func NewClientJSONRPC(tgt string, options ...ClientOption) (controller.ScrapperController, error) {
	opts := &clientOpts{}
	c := &clientScrapperController{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	opts.scrapperControllerGetByDomainClientOption = append(
		opts.scrapperControllerGetByDomainClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(GetByDomainRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as GetByDomainRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, scrapperControllerGetByDomainErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp GetByDomainResponse
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetByDomainResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.getByDomainEndpoint = jsonrpc.NewClient(
		u,
		"getByDomain",
		append(opts.genericClientOption, opts.scrapperControllerGetByDomainClientOption...)...,
	).Endpoint()
	c.getByDomainEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetByDomainEndpointMiddleware...))(c.getByDomainEndpoint)
	opts.scrapperControllerGetCountClientOption = append(
		opts.scrapperControllerGetCountClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			return nil, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, scrapperControllerGetCountErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp int
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetCountResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.getCountEndpoint = jsonrpc.NewClient(
		u,
		"getCount",
		append(opts.genericClientOption, opts.scrapperControllerGetCountClientOption...)...,
	).Endpoint()
	c.getCountEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetCountEndpointMiddleware...))(c.getCountEndpoint)
	opts.scrapperControllerGetMaxLatencyClientOption = append(
		opts.scrapperControllerGetMaxLatencyClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			return nil, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, scrapperControllerGetMaxLatencyErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp GetMaxLatencyResponse
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetMaxLatencyResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.getMaxLatencyEndpoint = jsonrpc.NewClient(
		u,
		"getMaxLatency",
		append(opts.genericClientOption, opts.scrapperControllerGetMaxLatencyClientOption...)...,
	).Endpoint()
	c.getMaxLatencyEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetMaxLatencyEndpointMiddleware...))(c.getMaxLatencyEndpoint)
	opts.scrapperControllerGetMinLatencyClientOption = append(
		opts.scrapperControllerGetMinLatencyClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			return nil, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, scrapperControllerGetMinLatencyErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp GetMinLatencyResponse
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetMinLatencyResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.getMinLatencyEndpoint = jsonrpc.NewClient(
		u,
		"getMinLatency",
		append(opts.genericClientOption, opts.scrapperControllerGetMinLatencyClientOption...)...,
	).Endpoint()
	c.getMinLatencyEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetMinLatencyEndpointMiddleware...))(c.getMinLatencyEndpoint)
	return c, nil
}
