//+build !swipe

// Code generated by Swipe v2.0.0-rc1. DO NOT EDIT.

package transport

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"github.com/kkucherenkov/golang-test-task/controller"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
	"github.com/pquerna/ffjson/ffjson"
	"net/http"
	"strings"
)

func MergeEndpointCodecMaps(ecms ...jsonrpc.EndpointCodecMap) jsonrpc.EndpointCodecMap {
	mergedECM := make(jsonrpc.EndpointCodecMap, 512)
	for _, ecm := range ecms {
		for key, codec := range ecm {
			mergedECM[key] = codec
		}
	}
	return mergedECM
}
func encodeResponseJSONRPC(_ context.Context, result interface{}) (json.RawMessage, error) {
	b, err := ffjson.Marshal(result)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func MakeScrapperControllerEndpointCodecMap(ep ScrapperControllerEndpointSet, ns ...string) jsonrpc.EndpointCodecMap {
	var namespace string
	if len(ns) > 0 {
		namespace = strings.Join(ns, ".") + "."
	}
	ecm := jsonrpc.EndpointCodecMap{}
	if ep.GetByDomainEndpoint != nil {
		ecm[namespace+"getByDomain"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetByDomainEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req GetByDomainRequest
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to GetByDomainRequest: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.GetCountEndpoint != nil {
		ecm[namespace+"getCount"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetCountEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				return nil, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.GetMaxLatencyEndpoint != nil {
		ecm[namespace+"getMaxLatency"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetMaxLatencyEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				return nil, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	if ep.GetMinLatencyEndpoint != nil {
		ecm[namespace+"getMinLatency"] = jsonrpc.EndpointCodec{
			Endpoint: ep.GetMinLatencyEndpoint,
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				return nil, nil
			},
			Encode: encodeResponseJSONRPC,
		}
	}
	return ecm
}

// HTTP JSONRPC Transport
func MakeHandlerJSONRPC(svcScrapperController controller.ScrapperController, options ...ServerOption) (http.Handler, error) {
	opts := &serverOpts{}
	for _, o := range options {
		o(opts)
	}
	epSet := MakeScrapperControllerEndpointSet(svcScrapperController)
	epSet.GetByDomainEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetByDomainEndpointMiddleware...))(epSet.GetByDomainEndpoint)
	epSet.GetCountEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetCountEndpointMiddleware...))(epSet.GetCountEndpoint)
	epSet.GetMaxLatencyEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetMaxLatencyEndpointMiddleware...))(epSet.GetMaxLatencyEndpoint)
	epSet.GetMinLatencyEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.scrapperControllerGetMinLatencyEndpointMiddleware...))(epSet.GetMinLatencyEndpoint)
	r := mux.NewRouter()
	handler := jsonrpc.NewServer(MakeScrapperControllerEndpointCodecMap(epSet), opts.genericServerOption...)
	r.Methods("POST").Path("/").Handler(handler)
	return r, nil
}
