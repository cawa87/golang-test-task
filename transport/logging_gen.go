//+build !swipe

// Code generated by Swipe v2.0.0-rc1. DO NOT EDIT.

package transport

import (
	"context"
	"github.com/go-kit/kit/log"
	"github.com/kkucherenkov/golang-test-task/controller"
	"time"
)

type ScrapperControllerLoggingMiddleware struct {
	next   controller.ScrapperController
	logger log.Logger
}

func (s *ScrapperControllerLoggingMiddleware) GetByDomain(ctx context.Context, domain string) (int64, int, error) {
	var (
		latency int64
		code    int
		err     error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetByDomain", "took", time.Since(now), "domain", domain, "latency", latency, "code", code, "err", logErr)
	}(time.Now())
	latency, code, err = s.next.GetByDomain(ctx, domain)
	return latency, code, err
}

func (s *ScrapperControllerLoggingMiddleware) GetCount(ctx context.Context) int {
	var (
		result int
	)
	defer func(now time.Time) {
		s.logger.Log("method", "GetCount", "took", time.Since(now), "result", result)
	}(time.Now())
	result = s.next.GetCount(ctx)
	return result
}

func (s *ScrapperControllerLoggingMiddleware) GetMaxLatency(ctx context.Context) (string, int64, int, error) {
	var (
		domain  string
		latency int64
		code    int
		err     error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetMaxLatency", "took", time.Since(now), "domain", domain, "latency", latency, "code", code, "err", logErr)
	}(time.Now())
	domain, latency, code, err = s.next.GetMaxLatency(ctx)
	return domain, latency, code, err
}

func (s *ScrapperControllerLoggingMiddleware) GetMinLatency(ctx context.Context) (string, int64, int, error) {
	var (
		domain  string
		latency int64
		code    int
		err     error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "GetMinLatency", "took", time.Since(now), "domain", domain, "latency", latency, "code", code, "err", logErr)
	}(time.Now())
	domain, latency, code, err = s.next.GetMinLatency(ctx)
	return domain, latency, code, err
}

func NewLoggingScrapperControllerMiddleware(s controller.ScrapperController, logger log.Logger) controller.ScrapperController {
	return &ScrapperControllerLoggingMiddleware{next: s, logger: logger}
}
